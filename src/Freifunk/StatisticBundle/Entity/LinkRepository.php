<?php

namespace Freifunk\StatisticBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Freifunk\StatisticBundle\Entity\Node;
use Freifunk\StatisticBundle\Entity\Link;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * LinkRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LinkRepository extends EntityRepository
{
    /**
     * @param Link $link
     *
     * @return Link
     */
    public function findExistingLink(Link $link)
    {
        $qb = $this->createQueryBuilder('l');
        $qb->andWhere($qb->expr()->eq('l.source', $qb->expr()->literal($link->getSource()->getId())));
        $qb->andWhere($qb->expr()->eq('l.target', $qb->expr()->literal($link->getTarget()->getId())));
        $qb->andWhere($qb->expr()->eq('l.type', $qb->expr()->literal($link->getType())));
        $qb->andWhere($qb->expr()->isNull('l.closeTime'));

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * Returns the number of links for a node between 2 dates
     *
     * @param Node      $node
     * @param \DateTime $start
     * @param \DateTime $end
     *
     * @return mixed
     */
    public function countLinksForNodeBetween(Node $node, \DateTime $start, \DateTime $end)
    {
        $query = $this->getEntityManager()
            ->createQuery('SELECT COUNT(l.source)
                FROM FreifunkStatisticBundle:Link l
                WHERE
                    l.source = ?1
                    AND l.openTime <= ?2
                    AND (l.closeTime >= ?3 OR l.closeTime IS NULL)
                    AND l.type = ?4')
            ->setParameters(array(
                1 => $node->getId(),
                2 => $end,
                3 => $start,
                4 => Link::CLIENT
            ));

        return (int) $query->getSingleScalarResult();
    }

    /**
     * Returns the number of unique     links for a node between 2 dates
     *
     * @param Node      $node
     * @param \DateTime $start
     * @param \DateTime $end
     *
     * @return mixed
     */
    public function countUniqueLinksForNodeBetween(Node $node, \DateTime $start, \DateTime $end)
    {
        $query = $this->getEntityManager()
            ->createQuery('SELECT COUNT(DISTINCT l.source)
                FROM FreifunkStatisticBundle:Link l
                WHERE
                    l.source = ?1
                    AND l.openTime <= ?2
                    AND (l.closeTime >= ?3 OR l.closeTime IS NULL)
                    AND l.type = ?4')
            ->setParameters(array(
                1 => $node->getId(),
                2 => $end,
                3 => $start,
                4 => Link::CLIENT
            ));

        return (int) $query->getSingleScalarResult();
    }

    /**
     * Computes all links for a timeline widget:
     *
     * @param Node|Node[] $nodes
     * @param string      $steps
     * @param string      $format
     *
     * @return array
     *
     * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
     */
    public function computeLinkTimeline($nodes, $steps = '1 hour', $format = 'Y-m-d H:00:00')
    {
        if (!is_array($nodes) && !($nodes instanceof \Traversable)) {
            $nodes = array($nodes);
        }
        if (empty($nodes)) {
            throw new NotFoundHttpException("No node selected");
        }
        $nodeIdList = array();
        foreach ($nodes as $node) {
            $nodeIdList = $node->getId();
        }

        // first we need all dates
        $qb = $this->createQueryBuilder('l');
        $qb->andWhere($qb->expr()->eq('l.type', $qb->expr()->literal(Link::CLIENT)));
        $qb->andWhere($qb->expr()->in('l.source', $nodeIdList));
        $qb->join('l.target', 'lt');
        $qb->select('l.openTime, l.closeTime, lt.id as targetId');
        $qb->orderBy('l.openTime', 'ASC');
        $links = $qb->getQuery()->getArrayResult();
        /** @var \DateTime $oldestDate */
        $oldestDate = !empty($links) ? $links[0]['openTime'] : new \DateTime();
        $now = new \DateTime(date($format));

        // now create a massive list of times since then in hours
        $times = array();
        $stats = array();
        while ($now->getTimestamp() >= $oldestDate->getTimestamp()) {
            $times[] = $now->format('Y-m-d H:i:s');
            $stats[$now->format($format)] = array();
            $now = clone $now;
            $now->modify('-' . $steps);
        }

        // iterate the times and create the stats
        $now = new \DateTime();
        foreach ($links as $link) {
            $linkTime = new \DateTime($link['openTime']->format($format));
            $linkEnd = $link['closeTime'];
            while (($linkEnd == null && $linkTime->getTimestamp() <= $now->getTimestamp())
                || ($linkEnd != null && $linkTime->getTimestamp() <= $linkEnd->getTimestamp())) {
                $stats[$linkTime->format($format)][$link['targetId']] = true;
                $linkTime->modify($steps);
            }
        }

        // now clean our steps array
        foreach ($stats as &$stat) {
            $stat = count($stat);
        }
        ksort($stats);

        return $stats;
    }
}
